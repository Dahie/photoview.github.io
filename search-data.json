[{"article":{"title":"How to contribute","url":"/docs/contribute-how-to/"},"sections":[{"link":"/docs/contribute-how-to/","content":""},{"heading":"Different ways to contribute","link":"/docs/contribute-how-to/#different-ways-to-contribute","content":""},{"heading":"Write code","link":"/docs/contribute-how-to/#write-code","content":"If you want to help write code for Photoview, take a look at the open issues ,if you find an issue that you'd like to work on, please write a comment on that issue to let others know that you will be working on it. If you want to add a feature that has no open issue, please create a new one. If you need help regarding development, you are very welcome to join our Discord channel and ask questions."},{"heading":"Write documentation","link":"/docs/contribute-how-to/#write-documentation","content":"This documentation is far from complete and help in writing it is very much encouraged.At the top-right of each article there is a pencil icon, that when clicked will take you to GitHub where you can edit the page and send a pull-request when you are done.If you are unfamiliar with sending pull-requests on GitHub see their article About collaborative development models . The documentation is written in Markdown .An implicit level one heading will automatically be added to each page with the page title, theirefore the pages should be written using level two or more headings."},{"heading":"Help others","link":"/docs/contribute-how-to/#help-others","content":"Another way to contribute to the community is by helping other set up and use Photoview.You can do so over at the Discord channel or on various forums."},{"heading":"Report bugs, suggest new features or improvements","link":"/docs/contribute-how-to/#report-bugs-suggest-new-features-or-improvements","content":"If you find a bug, you can report it such that it can be fixed.Or if you have an idea for a nice feature that Photoview is lacking you can suggest it and it might be added in a future update. To do this go to the issues page and check that an issue for the bug or feature doesn't already exist.If it doesn't click the \"New issue\" button and select whether the issue is regarding a bug or a new feature, now fill out the form and finish off by clicking on \"Submit new issue\"."},{"heading":"The code structure","link":"/docs/contribute-how-to/#the-code-structure","content":"TODO: Explain the software stack and code structure: Frontend: React, Apollo, Styled Components Backend: Golang, Graphql, Gorm The API, how to write a new client (like a mobile or desktop app)"}]},{"article":{"title":"Setup Development Environment","url":"/docs/contribute-setup-locally/"},"sections":[{"link":"/docs/contribute-setup-locally/","content":"How to set up a development environment locally."},{"heading":"Local setup","link":"/docs/contribute-setup-locally/#local-setup","content":"Install a local mysql server, and make a new database Rename /api/example.env to .env and update the MYSQL_URL field Rename /ui/example.env to .env"},{"heading":"Start API server","link":"/docs/contribute-setup-locally/#start-api-server","content":"Make sure golang is installed. Some C libraries are needed to compile the API, see go-face requirements for more details. They can be installed as shown below: # Ubuntu sudo add-apt-repository ppa:strukturag/libheif sudo add-apt-repository ppa:strukturag/libde265 sudo apt-get update sudo apt-get install libdlib-dev libblas-dev libatlas-base-dev liblapack-dev libjpeg-turbo8-dev libheif-dev # Debian sudo apt-get install libdlib-dev libblas-dev libatlas-base-dev liblapack-dev libjpeg62-turbo-dev libheif-dev # macOS brew install dlib libheif Then run the following command to start the API server: cd ./api && go run server.go"},{"heading":"Start UI server","link":"/docs/contribute-setup-locally/#start-ui-server","content":"Make sure node is installed.In a new terminal window run the following commands: cd ./ui && npm start The site can now be accessed at localhost:1234 .And the graphql playground at localhost:4001"}]},{"article":{"title":"FAQ","url":"/docs/faq/"},"sections":[{"link":"/docs/faq/","content":""},{"heading":"Move cache to another hard drive?","link":"/docs/faq/#move-cache-to-another-hard-drive","content":"Yes you can. If you are running Photoview using docker-compose, change/add the volume mount that points to the cache to bind it to a path on your other hard drive. volumes: # Change this: - api_cache:/app/cache # To this: - /path/to/hard-drive/photoview_cache:/app_cache If you are not using Docker, simply set the PHOTOVIEW_MEDIA_CACHE environment variable to the desired path. E.g.: Set the variable in .env, Or alternatively, export PHOTOVIEW_MEDIA_CACHE=/path/to/hard-drive/photoview_cache"},{"heading":"My PHOTOVIEW_MEDIA_CACHE is very large! Is it safe to delete it?","link":"/docs/faq/#my-photoview_media_cache-is-very-large!-is-it-safe-to-delete-it","content":"The size of the media cache will scale with the size of your photo library, and as such it can become very large.If you delete it, it will be recreated if you continue to use Photoview.As such it is not advisable to delete the cache if you are still using Photoview, unless, perhaps, if you are significantly changing the library of photos on disk.If you want to permanently uninstall Photoview, then yes, feel free to remove/delete the directory so as not to waste storage space.In this case, you will also likely want to remove your database."},{"heading":"I click \"Scan All\" but nothing happens","link":"/docs/faq/#i-click-\"scan-all\"-but-nothing-happens","content":"If you are using Docker, make sure that your media is properly mounted. If you are unsure about that see Setup with Docker . To troubleshoot this, you can enter the container and check that the media is present.To do this execute the following command docker-compose exec -it photoview /bin/bash, then list the mounted directory with ls /photos."},{"heading":"The scanner is mostly working but it randomly stops before it's finished","link":"/docs/faq/#the-scanner-is-mostly-working-but-it-randomly-stops-before-it's-finished","content":"Check the server logs with docker-compose logs and look for signal: killed errors, similar to the one below: Failed to begin database transaction: failed to process photo: &lt;...&gt;: signal: killed This error is thrown if the server doesn't have enough resources to process the media, and the operating system kills some worker processes to free up resources.To circumvent that, you can reduce the number of concurrent workers .Try setting it to 1 and see if that fixes the problem."},{"heading":"Where do I find logging information","link":"/docs/faq/#where-do-i-find-logging-information","content":"Navigate to the directory where your docker-compose.yml file lies, and execute docker-compose logs."},{"heading":"I forgot the password to the admin user, is there a way to reset it?","link":"/docs/faq/#i-forgot-the-password-to-the-admin-user-is-there-a-way-to-reset-it","content":"Yes, but you will have to update the password manually in the database. If you are using the default docker-compose setup, you can connect to the database by running the following command. $ docker-compose exec -it db mysql -uphotoview -pphotosecret photoview Next you will have to manually hash a new password using the bcrypt hashing algorithm.The easiest way to do so it using an online tool like bcrypt-generator.com . You can run the following SQL query to get a table of users. > SELECT * FROM users; To update the password of one of the users, run the following. But replace $2a$12$APn0mVXrxjNnKencpxBFWe82SMzeaUInvJDidZButEI9CCk3x.UAO with your own generated password hash,and admin with the username of your admin user. > UPDATE users SET password='$2a$12$APn0mVXrxjNnKencpxBFWe82SMzeaUInvJDidZButEI9CCk3x.UAO' WHERE username='admin'; Query OK, 1 row affected (0.011 sec) Rows matched: 1 Changed: 1 Warnings: 0"}]},{"article":{"title":"Getting Started","url":"/docs/getting-started/"},"sections":[{"link":"/docs/getting-started/","content":"Get Photoview up and running as quickly as possible"},{"heading":"Setup with Docker","link":"/docs/getting-started/#setup-with-docker","content":"The easiest way to setup Photoview is using Docker with docker-compose."},{"heading":"Configure compose file","link":"/docs/getting-started/#configure-compose-file","content":"Make a new docker-compose.yml file, and copy the content of docker-compose.example.yml to it. Edit docker-compose.yml, find the comments starting with Change This:, and change the values, to properly match your setup. If you are just testing locally, you don't have to change anything. For more details see Setup with Docker"},{"heading":"Starting the server","link":"/docs/getting-started/#starting-the-server","content":"Run the following command to start the server. docker-compose up -d If the endpoint or the port hasn't been changed in the docker-compose.yml file, Photoview can now be accessed at http://localhost:8000"},{"heading":"Setup Wizard","link":"/docs/getting-started/#setup-wizard","content":"When you first visit the site, you should be presented with an initial setup wizard.  Enter a new username and password . For the photo path , enter the path in the docker container where your photos are located.This can be set from the docker-compose.yml file under api -> volumes.The default location is /photos A new admin user will be created, with access to the photos located at the path provided under the initial setup. The photos will have to be scanned before they show up, you can start a scan manually, by navigating to Settings and clicking on Scan All"}]},{"article":{"title":"Setup with Docker","url":"/docs/installation-docker/"},"sections":[{"link":"/docs/installation-docker/","content":"By far the easiest way to get up and running with Photoview is by running it inside a Docker container.With Docker, all dependencies are automatically installed and ready to go.If you are completeley new to Docker and want to learn more, check out this article by FreeCodeCamp . To better organise the Docker containers, a tool called Docker Compose can be used.This lets you configure containers in a yaml file, and quickly start all the configured containers at once.Although this tool can't do anything you can't already to with Docker alone, it simplifes the process."},{"heading":"Setup with Docker Compose","link":"/docs/installation-docker/#setup-with-docker-compose","content":"Prerequisite: Docker Engine and Docker Compose is installed on your server.See [Install Docker Engine][docker-install] and [Install Docker Compose][install-docker-compose] on how to do so. To configure Photoview using Docker Compose, first copy the contents of [docker-compose.example.yml][docker-compose.example.yml],and save it to a file called docker-compose.yml. Within the file you will find two services: the Photoview server itself named photoview and a MariaDB database named db.The Photoview service is already configured with the database."},{"heading":"Configuring docker-compose.yml","link":"/docs/installation-docker/#configuring-docker-compose.yml","content":"The compose file is setup to work without any modifications. If you just want to get started skip to the next section . But you might want to make a few changes to fit your setup:"},{"heading":"Port","link":"/docs/installation-docker/#port","content":"You can change the port that Photoview will be running on under services.photoview.ports.By default the value is 8000:80, this means that port 80 inside the container will be mapped to 8000 on the host machine.Eg. if you want your instance to run on port 1234 instead, change the value to 1234:80.Notice that the port inside the container 80 matches the value of PHOTOVIEW_LISTEN_PORT=80 under services.photoview.environment."},{"heading":"Environment variables","link":"/docs/installation-docker/#environment-variables","content":"Under services.photoview.environment a number of environment variables are definedto configure various parts of Photoview. For a detailed description of all available environment variables,see Environment variables . One thing that you might want to configure here is the MAPBOX_TOKEN variable.This is needed if you want to use map related features, like the Places page.A token can be generated for free on [Mapbox's website][mapbox-access-token], after you create an account."},{"heading":"Volumes","link":"/docs/installation-docker/#volumes","content":"For Photoview to find your media, your files must be mounted inside the Photoview container using one or more [bind mounts][docker-bind-mount].This is configured under the services.photoview.volumes path in the docker-compose.yml file. By default the only bind mount is: ./photos_path:/photos:ro. This line should be interpreted as <HOST_PATH>:<CONTAINER_PATH>:ro,it means that <HOST_PATH> on your machine will be accessible as <CONTAINER_PATH> inside the Photoview container.When you later have to configure where Photoview should look for your files, you should provide the path within the container, ie. the <CONTAINER_PATH>. The :ro part at the end, means that the files will be mounted as read-only and it will not be possible for Photoview to change your files.Although this part is optional, it is recommended to increase security. You can add as many bind mounts as you'd like. For example if your media is stored in the Pictures directory of your home user,you might want to add a bind mount like so: /home/ben/Pictures:/bens_pictures. Now the media will be accessible from /bens_pictures within the container."},{"heading":"Running docker-compose.yml","link":"/docs/installation-docker/#running-docker-compose.yml","content":"To start the docker containers specified inside the docker-compose.yml file, run the following command: $ docker-compose up -d This will start the containers, -d means that it will do this in the background.When the system has started, you can access it from http://localhost:8000, unless you specified a custom port. Below are some other commonly used Docker Compose commands. $ docker-compose down # stop the containers $ docker-compose logs # show the logs of the containers $ docker-compose ps # show status of the running containers"},{"heading":"Docker tags and versioning","link":"/docs/installation-docker/#docker-tags-and-versioning","content":"The version of Photoview, when running Docker, can be specified using a tag.There exists the following tags: latest, this is the latest released version. edge, this reflects the master branch and thus might include unreleased and unfinished features. It is not recommended to use this in production. Besides those tags, a particular version can be specified.This is done using the following formatting: x.y.z (eg. 2.3.5) or x.y (eg. 2.3) or x (eg. 2), where: x is the major version, each major version is not compatiable with the previous. y is the minor version, each minor version includes bigger features and changes, but it keeps compatibility. z is the patch version, a patch version only includes bug fixes and minor improvements. If a full version is specified, for example 2.3.6, then that corresponds with that specific release and that image will never change.But if only 2.3 that represents the latest patch version for 2.3.z, thus if a 2.3.7 is released, 2.3 will also be updated.Lastly 2 would be the latest version within the major version. It is recommended to use version 2 for most circumstances, as in that way you get the latest updates, but your system will not break after an automatic update."},{"heading":"Updating","link":"/docs/installation-docker/#updating","content":"To update Photoview running in a docker-compose environment, simply run the following commands: $ docker-compose pull # Pull the latest images $ docker-compose up -d # Restart and update the containers whose images has changed"}]},{"article":{"title":"Environment Variables","url":"/docs/installation-environment-variables/"},"sections":[{"link":"/docs/installation-environment-variables/","content":"The Photoview server can be configured through several environment variables.This page presents an index of them all along with a description."},{"heading":"Database related","link":"/docs/installation-environment-variables/#database-related","content":"Environment variables related to configuration of the database. Required Variable Default Notes PHOTOVIEW_DATABASE_DRIVER mysql Available options mysql <small>(default)</small>, postgres and sqlite. <br/> Defines what database backend is used. One of the following MUST be set in addition to this variable. <center>✓</center> PHOTOVIEW_MYSQL_URL Required if the driver is mysql. The URL of the MySQL database to connect to. See formatting documentation . <center>✓</center> PHOTOVIEW_POSTGRES_URL Required if the driver is postgres. The connection string of the Postgres database to connect to. See formatting documentation . <center>✓</center> PHOTOVIEW_SQLITE_PATH Required if the driver is sqlite. Specifies the filepath for where the sqlite database should be saved."},{"heading":"Server related","link":"/docs/installation-environment-variables/#server-related","content":"Required Variable Default Notes PHOTOVIEW_LISTEN_IP 127.0.0.1 The IP for the server to listen on. In most cases can be set to localhost. PHOTOVIEW_LISTEN_PORT 4001 The port for the server to listen on PHOTOVIEW_SERVE_UI 0 Set to 1 for the server to also serve the built static ui files. PHOTOVIEW_UI_PATH ./ui Specify where the built UI files are located if PHOTOVIEW_SERVE_UI is enabled. <center>✓</center> PHOTOVIEW_API_ENDPOINT Used if PHOTOVIEW_SERVE_UI is disabled.<br/>The url from where the API can be accessed publicly. <center>✓</center> PHOTOVIEW_UI_ENDPOINT Used if PHOTOVIEW_SERVE_UI is disabled.<br/>The url from where the UI can be accessed publicly."},{"heading":"General","link":"/docs/installation-environment-variables/#general","content":"Required Variable Default Notes PHOTOVIEW_MEDIA_CACHE ./photo_cache Filepath for where to store generated media such as thumbnails and optimized videos. MAPBOX_TOKEN To enable map related features, you need to create a mapbox token. A token can be generated for free at https://account.mapbox.com/access-tokens/ It's a good idea to limit the scope of the token to your own domain, to prevent others from using it. PHOTOVIEW_DISABLE_FACE_RECOGNITION 0 Completely disable face recognition and hide the icon from the side menu. PHOTOVIEW_DISABLE_VIDEO_ENCODING 0 Disable ffmpeg encoding, but still show web compatiable videos that doesn't need encoding. PHOTOVIEW_DISABLE_RAW_PROCESSING 0 disable processing of RAW photos using darktable-cli."}]},{"article":{"title":"Manual Setup","url":"/docs/installation-manual/"},"sections":[{"link":"/docs/installation-manual/","content":"This guide explains how to build, install and configure Photoviewon a fresh installation of Ubuntu 20.04 LTS to run directly on the system without using Docker."},{"heading":"Preparation","link":"/docs/installation-manual/#preparation","content":"Make sure you got the necessary tools and libraries in order to build and run Photoview. # Make sure your computer is up to date $ sudo apt update $ sudo apt upgrade # Install tools used in this guide $ sudo apt install git curl wget # Install necessary repositories $ sudo apt install software-properties-common $ sudo add-apt-repository ppa:strukturag/libheif $ sudo add-apt-repository ppa:strukturag/libde265 # Install dependencies required to build and run Photoview $ sudo apt install libdlib-dev libblas-dev libatlas-base-dev liblapack-dev libjpeg-turbo8-dev build-essential \\ libdlib19 libdlib-dev libblas-dev libatlas-base-dev liblapack-dev libjpeg-dev libheif-dev pkg-config gpg Install Golang by following the instructions for Linux from their Download and install Go page, the steps should be something like the following. # Download Go $ wget https://golang.org/dl/go1.16.linux-amd64.tar.gz # Install Go $ sudo tar -C /usr/local -xzf go1.16.linux-amd64.tar.gz $ rm go1.16.linux-amd64.tar.gz # Add Go to the path of your user $ echo 'export PATH=$PATH:/usr/local/go/bin' >> \"$HOME/.bashrc\" && source \"$HOME/.bashrc\" # Verify that go is now installed $ go version # Expected output: go version go1.16 linux/amd64 Now install Node 16 and NPM if you've not done so already (it installs npm automatically) $ curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - $ sudo apt install nodejs"},{"heading":"Download and build Photoview","link":"/docs/installation-manual/#download-and-build-photoview","content":"Navigate to Photoview Releases and download the source code for the latest version, extract it and open the extracted directory in the terminal. $ cd /opt $ git clone https://github.com/photoview/photoview.git $ cd photoview/"},{"heading":"Build the Web user-interface","link":"/docs/installation-manual/#build-the-web-user-interface","content":"$ cd ui/ $ npm install $ npm run build This builds the UI source code and saves it in the ui/build/ directory."},{"heading":"Build the API back-end","link":"/docs/installation-manual/#build-the-api-back-end","content":"$ cd api/ $ go build -v -o photoview . This builds the server executable to api/photoview."},{"heading":"Copy needed files","link":"/docs/installation-manual/#copy-needed-files","content":"Make a new directory and move the needed files to it. $ cd /opt/photoview $ mkdir app $ cp -r ui/build/ app/ui/ $ cp api/photoview app/photoview $ cp -r api/data/ app/data/"},{"heading":"Setup database","link":"/docs/installation-manual/#setup-database","content":"It's highly recommended to configure a full database,but Sqlite is also supported though it might be substantially slower on big media libraries.If you decide to use Sqlite, you can skip this step. If you don't already have a database you can configure one by following this guide on installing MySQL on Ubuntu 20.04 . If you've not done already, configure a new database and user to use with Photoview. $ sudo mysql # Create new user named 'photoview' mysql> CREATE USER 'photoview'@'localhost' IDENTIFIED BY 'Photo_Secret#12345'; # Create new database named 'photoview' mysql> CREATE DATABASE photoview; # Grant user full access to the newly created database mysql> GRANT ALL PRIVILEGES ON photoview.* TO 'photoview'@'localhost'; This will create a new user photoview with the password Photo_Secret#12345 and a new database named photoview. When you're done you should have a running MySQL database with a new user identified by a username and password and an empty database."},{"heading":"Configure Photoview","link":"/docs/installation-manual/#configure-photoview","content":"Photoview is configured through environment variables. It will also load environment variables from a .env file.We will use that to configure Photoview. Copy the api/example.env file to the output directory, and name it .env. $ cp api/example.env app/.env To configure the database to use our MySQL database, edit PHOTOVIEW_MYSQL_URL to match our database configuration.Replace user, password and dbname. PHOTOVIEW_DATABASE_DRIVER=mysql PHOTOVIEW_MYSQL_URL=user:password@tcp(localhost)/dbname PHOTOVIEW_SERVE_UI=1 PHOTOVIEW_PUBLIC_ENDPOINT=http://localhost:4001/ See environment variables for more details."},{"heading":"Install optional dependencies","link":"/docs/installation-manual/#install-optional-dependencies","content":"Photoview can use some external programs to do more advanced things,these programs are not required to use Photoview but some functionality will only be avaliable with them installed."},{"heading":"RAW photo support","link":"/docs/installation-manual/#raw-photo-support","content":"Photoview can use Darktable to convert RAW photos to JPEGS when scanning.To enable this install Darktable and make sure the darktable-cli binary is in your $PATH environment variable. $ sudo apt install darktable"},{"heading":"Video transcoding","link":"/docs/installation-manual/#video-transcoding","content":"Photoview can use ffmpeg to convert video files that cannot be played directly in the browser. $ sudo apt install ffmpeg"},{"heading":"Exif parsing","link":"/docs/installation-manual/#exif-parsing","content":"Photoview can optionally use exiftool to parse EXIF metadata faster and more reliably. Without it it will use its internal exif parser. $ sudo apt install exiftool"},{"heading":"Post installation","link":"/docs/installation-manual/#post-installation","content":"If you've made it this far, you should be able to start Photoview.(Skip this step if you are using the systemd unit file.) $ ./photoview Once it has started it should print something like the following.(If using the systemd unit, this message should be visible in the output of the systemctl status command.) Photoview UI public endpoint ready at http://localhost:4001/ Navigate to http://localhost:4001/ and you should be presented with the \"Initial Setup\" wizard.From here enter a new username and password. For the Photo Path enter the filepath for your media, you can always change this later from the settings. Next click Setup Photoview to create the new admin user. Now navigate to the Settings page and click on Scan All. The scanner should now begin to scan for new media."},{"heading":"Updating","link":"/docs/installation-manual/#updating","content":"Short version, you will download the latest version, rebuild, and copy the needed files. You can follow the \"Download and build Photoview\" section above. If you've made no changes to the database, photo directories, or cache directories you should be done."}]},{"article":{"title":"Reverse Proxy","url":"/docs/installation-reverse-proxies/"},"sections":[{"link":"/docs/installation-reverse-proxies/","content":"TODO: Reverse proxy with Traefik + Docker"},{"heading":"Using Caddy","link":"/docs/installation-reverse-proxies/#using-caddy","content":"Caddy is a great webserver written in go that automatically handles all SSL certificates without the need for certbot. First setup Photoview via the regular docker-compose setup here . Then after installing Caddy it's time to setup your Caddyfile. Simply edit your caddyfile located at /etc/caddy/Caddyfile to the following (adjust to your domain). photos.qpqp.dk { reverse_proxy http://photos.qpqp.dk:8000 } Then all we need to do now is systemctl reload caddy and then your photoview instance should now be accessible via https://photos.qpqp.dk with SSL and without the need of specifiying a port. That's it!"},{"heading":"Using Apache VirtualHosts","link":"/docs/installation-reverse-proxies/#using-apache-virtualhosts","content":"If you are running the docker for Photoview on the same machine that is hosting your Nextcloud/Owncloud setup, and want them both to be accessible via the standard web port 80 - you'll need to setup a reverse proxy on your owncloud webserver to achieve that. There are many guides online going into more detail on this general type of setup you can refer to, like this one here . As a crash-course, though, you can achieve this type of setup by enabling the following on your machine running Nextcloud/Owncloud and the Photoview setup by doing the following. First, enable the necessary Apache Modules by running the following: sudo a2enmod proxy sudo a2enmod proxy_http sudo a2enmod proxy_balancer sudo a2enmod lbmethod_byrequests Then, restart Apache by running sudo systemctl restart apache2 Now you'll need a VirtualHost entry for your photoview proxy. Here's an example below, of a virtual host file entry for Photoview. These are typically stored in /etc/apache2/sites-available. You can create one with: sudo nano /etc/apache2/sites-available/yoururl.ca.conf You'll then want to populate it like below, changing the variables below to reflect your own domains: <VirtualHost *:80> ServerAdmin admin@yoururl.ca ServerName photos.yoururl.ca ServerAlias www.photos.yoururl.ca ProxyRequests Off ProxyPreserveHost On ProxyPass / http://photos.yoururl.ca:8000/ ProxyPassReverse / http://photos.yoururl.ca:8000/ </VirtualHost> For more information on VirtualHosts, take a look at this article. Once you've created this VirtualHost entry, enable the entry with: sudo a2ensite yoururl.ca.conf restart your server once more with: sudo systemctl restart apache2 and you should now be able to access your website on port 80, with Apache passing it through to the Photoview docker on port 8000."}]},{"article":{"title":"Use with systemd","url":"/docs/installation-systemd/"},"sections":[{"link":"/docs/installation-systemd/","content":"You can optionally use systemd to manage photoview and start the program at boot.It also allows the program to run as its own system user, enhancing the security of the process. To get started, follow the Manual Setup Installation guild .When you get to the Copy needed files section, replace those steps with the steps listed below."},{"heading":"Using with `systemd`","link":"/docs/installation-systemd/#using-with-systemd","content":"The first three files in the steps below cause systemd to run photoview as the user:group equal to photoview:photoview.This limits the permissions of the program, (slightly) enhancing security by limiting its access to files and directories to which the process has explicitly been given access. It also necessitates your PHOTOVIEW_MEDIA_CACHE (and PHOTOVIEW_SQLITE_PATH if you are using sqlite) directory(ies) to be read- and write-able by the photoview user.If this is the first time you are installing photoview, the permissions should be handled automatically.If you are upgrading, and there are already files in that directory, you need to change the ownership, recursively, of those directories and their contents using chown. Finally, systemd typically operates on an hierarchy of system paths.As such, instead of installing everything together in /opt/, the program files will be placed under /usr, /lib/, and /var.Be aware that, regardless of the path, the cache files in PHOTOVIEW_MEDIA_CACHE can be very large.If this will cause issues, you can change the installation location.If you do so, the photoview.service and photoview.tmpfiles will need to be altered, as well, if you plan to use the systemd unit file. Reminder: These steps replace Copy needed files from the manual installation guide. Copy systemd files: systemd/photoview.service to /etc/systemd/system/multi-user.target/photoview.service systemd/photoview.sysusers.conf to /usr/lib/sysusers.d/photoview.conf systemd/photoview.tmpfiles to /usr/lib/tmpfiles.d/photoview.conf If you do not plan to use sqlite, remove the 2nd line from systemd/photoview.tmpfiles before copying. Make the directories where the program files will be placed : Note: The install command, as demonstrated below, creates these required directories for you. /usr/share/webapps/photoview-ui /usr/lib/photoview /var/cache/photoview/media_cache /var/lib/photoview (for sqlite path, if used) Copy built program files into appropriate locations If you are upgrading from a state where you were not using the systemd service: Change ownership of the media cache directory (and sqlite path, if used) $ sudo chown -R photoview:photoview /var/cache/photoview $ sudo chown -R photoview:photoview /var/lib/photoview If this is a fresh installation, ensure the paths are owned and read-/write-able by the photoview user and group A synopsis of the previous steps by example: $ cd /opt/photoview $ sudo install -Dm0644 -t \"/usr/lib/systemd/system\" \"/opt/photoview/systemd/photoview.service\" $ sudo install -Dm0644 \"/opt/photoview/systemd/photoview.sysusers.conf\" \"/usr/lib/sysusers.d/photoview.conf\" $ sudo install -Dm0644 \"/opt/photoview/systemd/photoview.tmpfiles\" \"/usr/lib/tmpfiles.d/photoview.conf\" $ sudo install -d \"/var/cache/photoview/media_cache\" # The next line is if you plan to use `sqlite` $ sudo install -d \"/var/lib/photoview\" $ cd /opt/photoview/ui/build $ sudo find * -type f -exec install -Dm0644 \"{}\" \"/usr/share/webapps/photoview-ui/{}\" \\; $ cd /opt/photoview/api $ sudo install -Dm0755 -t \"/usr/lib/photoview\" \"/opt/photoview/api/photoview\" $ sudo ln -s /usr/lib/photoview/photoview /usr/bin/photoview $ sudo find data -type f -exec install -Dm0644 \"{}\" \"/usr/lib/photoview/{}\" \\; $ sudo install -Dm0644 \"/opt/photoview/api/example.env\" \"/etc/photoview.env\""},{"heading":"Using the `systemd` unit file","link":"/docs/installation-systemd/#using-the-systemd-unit-file","content":"To start (or stop) the photoview service: $ sudo systemctl <start/stop> photoview.service To enable (or disable) the unit file to (no longer) start automatically during boot: $ sudo systemctl <enable/disable> photoview.service To view status of the unit file: $ sudo systemctl status photoview.service Use this to print error messages if your photoview instance fails at runtime To continuously print to screen (a.k.a. follow) all messages from the service while it is running: $ sudo journalctl -f -b0 -u photoview.service Useful in debugging while running consecutive start/stop commands in a separate terminal"}]},{"article":{"title":"Introduction","url":"/docs/"},"sections":[{"link":"/docs/","content":"Photoview is a simple and user-friendly photo gallery that's made for photographersand aims to provide an easy and fast way to navigate directories, with thousands of high resolution photos. You configure Photoview to look for photos and videos within a directory on your file system.The scanner will then automatically pick up your media and start to generate thumbnail images to make browsing really fast.It's worth noting that Photoview will never actually touch you media, it only needs read access and it saves thumbnails to a cache independent of the original media. When the media has been scanned it will show up on the website, organised in the same way as on the filesystem.From the website it is also possible to see your media on a world map, provided the image files have embedded location information."},{"heading":"Aim and values","link":"/docs/#aim-and-values","content":"Photoview has been developed with a focused set of aims and values from the beginning. The file system is the Source of Truth ,this is the most important value for the software.There are two big advantages to letting the file system dictate the structure and organisation of the media.Firstly, it provides a lot of flexibility for organisation, as it lets you use what ever tool that can modify the file system for organising the media,let it be a simple file server like FTP or NTFS or a cloud service like Nextcloud .Secondly, it removes dependency; you can uninstall Photoview at any time and your photos are still organised. The original files are never touched ,this hardens security significantly, as your media can be read-only, meaning that you don't have to trust Photoview to keep your media safe, you can guarantee it."},{"heading":"Features","link":"/docs/#features","content":"Closely tied to the file system . The website presents the images found on the local filesystem of the server, directories are mapped to albums. User management . Each user is mapped to one or more paths on the local filesystem, photos within that path can be accessed by that user. Sharing . Albums, as well as individual media, can easily be shared with a public link, the link can optionally be password protected. RAW support . Darktable is used to automatically convert RAW files from a large range of supported cameras . EXIF parsing . All media is scanned for EXIF data and shown next to the media when selected. Duplication detection . If a RAW and JPEG image pair is found next to each other, only one image show up and the scanner will use the JPEG image, instead of generating a new in the cache. Video support . Many common video formats are supported. Videos will automatically be optimized for web. Timeline . Media will be shown on a timeline that sorts media by the day they were created and groups them by day. World map . Photos with embedded GPS coordinates are presented on a world map. Face recognition . Faces will automatically be detected in photos, and photos of the same person will be grouped together. Performant . Thumbnails are automatically generated and photos first load when they are visible on the screen. In full screen, thumbnails are displayed until the high resolution image has been fully loaded. Secure . All media resources are protected with a cookie-token, all passwords are properly hashed, and the API uses a strict CORS policy when necessary. Database support . Both MySQL, Postgres and Sqlite databases are supported."},{"heading":"How do I get started?","link":"/docs/#how-do-i-get-started","content":"If you just want to get up and running as fast as possible then see Getting Started . If you instead want a more detailed guide see setup with docker If you want to install it manually without Docker, see the manual setup guide instead."}]},{"article":{"title":"Using with Nextcloud","url":"/docs/usage-nextcloud/"},"sections":[{"link":"/docs/usage-nextcloud/","content":"Photoview can be configured to grab media from Nextcloud ."},{"heading":"Locating Nextcloud files on the filesystem","link":"/docs/usage-nextcloud/#locating-nextcloud-files-on-the-filesystem","content":"All files uploaded to Nextcloud are located in the folder called data/ at the location where Nextcloud is installed.Inside that folder you will find another folder for each Nextcloud user.All files uploaded by a user is located inside their respective folders. Now find the path to where your Nextcloud media is located, and copy it as we will need it later.The path could look somthing like this: ~/nextcloud/data/example_user/files/Photos"},{"heading":"Configure Photoview","link":"/docs/usage-nextcloud/#configure-photoview","content":"The next step will be to add this path to the desired Photoview user."},{"heading":"Adding path as a Docker volume","link":"/docs/usage-nextcloud/#adding-path-as-a-docker-volume","content":"If you are not running Photoview in Docker you can skip this step. Before the Nextcloud files can be accessed by the Photoview container,they must first be mounted as a volume . For docker-compose this can be done by adding the volume to the docker-compose.yml configuration file for Photoview.Open it up and under volumes: add a new volume like so: - NEXTCLOUD_PATH:/nextcloud:ro Replace NEXTCLOUD_PATH with the path you copied in step 1.The /nextcloud path dictates where this mount can be accessed from within the container, this will be important for the next step.The :ro in the end, instructs Docker to mount the folder in read-only mode. Now restart the docker container."},{"heading":"Add path to Photoview user","link":"/docs/usage-nextcloud/#add-path-to-photoview-user","content":"You can now add the new path the desired user from the Settings page,by clicking on the Edit button next to the user.From there you can add the new path. If you mounted the volume like in the previous step, the path will be /nextcloud.When the path has been added, you can click Save.You can now scan the user and the pictures and videos from nextcloud will appear in Photoview."},{"heading":"Keep Photoview updated automatically","link":"/docs/usage-nextcloud/#keep-photoview-updated-automatically","content":"If you don't want to press the Scan button manually each time you've added new files to Nextcloud, you can configure a periodic scanner to automatically scan for changes."}]},{"article":{"title":"File scanner","url":"/docs/usage-scanner/"},"sections":[{"link":"/docs/usage-scanner/","content":"Each user in Photoview is assigned a set of file paths , when the scanner runs it will search for media within each path. A user can have multiple file paths but one cannot be contained within another one. Two users can have overlapping file paths.When this is done, each shared media will only be processed once by the scanner, such that the cache doesn't contain duplicates, but public shares will be individual to each user, and so will media favorites."},{"heading":"Supported file types","link":"/docs/usage-scanner/#supported-file-types","content":"Photoview supports the browser native image formats out of the box (JPEG, PNG, GIF etc.).But for files not understood by the browser, Photoview can use tools to convert these files into browser supported types.It can use Darktable to process RAW image files and Ffmpeg to process video formats. A complete list of supported file formats can be found in the media_type.go source file."},{"heading":"Thumbnail generation","link":"/docs/usage-scanner/#thumbnail-generation","content":"When the scanner finds a new image it generates a small sized thumbnail to be used when many images are shown at once.It saves this thumbnail to the media cache directory, as specified by the PHOTOVIEW_MEDIA_CACHE environment variable . In addition to the thumbnail, Photoview will also generate a high resolution version JPEG version of the image,if the file format of the original image cannot be displayed in the browser, for example a RAW image."},{"heading":"Ignorefiles","link":"/docs/usage-scanner/#ignorefiles","content":"Inside any media directory a .photoviewignore file can be added with rules for files and directories to ignore.The rules will be applied from the directory it is placed in and all its subdirectories.If another ignore file is present in one of the subdirectories the rules will be merged. Ignore rules follow the format of .gitignore files . # ignores all directories with the name `directory_name` directory_name/ # ignore all files with the .jpg extension *.jpg # make an exception to the previous rule for files named `image.jpg` !image.jpg"}]},{"article":{"title":"Settings Page","url":"/docs/usage-settings/"},"sections":[{"link":"/docs/usage-settings/","content":""},{"heading":"Manage users","link":"/docs/usage-settings/#manage-users","content":""},{"heading":"Add and remove users","link":"/docs/usage-settings/#add-and-remove-users","content":"To add a new user, click the New user button and fill in the username and a media path for the new user.After creating a new user, make sure to add a password to the account as well, by clicking on the Change password button, next to the user."},{"heading":"Editing users","link":"/docs/usage-settings/#editing-users","content":"A user can be edited by clicking on the Edit button for the user. Photo path: is the path on the file system of the server from where the media of the user is located.Note if running Docker, that this refers to the file system of the container and not the host.Multiple paths can be added, if the media for the user is spread across multiple directories.For more information, see File scanner . Admin: if the user is marked as admin, they will be able to manually start the scanner and to manage and create new users."},{"heading":"Scanner","link":"/docs/usage-settings/#scanner","content":""},{"heading":"Periodic Scanner","link":"/docs/usage-settings/#periodic-scanner","content":"When the periodic scanner is enabled,Photoview will automatically scan all users for new media at a fixed time interval."},{"heading":"Concurrent Workers","link":"/docs/usage-settings/#concurrent-workers","content":"This setting specifies how many scanner jobs that are allowed to run in the background at once.The lower the value, the longer time it will take to process all media, but the less system resources it will use at once.If you are running Photoview on limited hardware such as a Raspberry Pi, it is recommended to keep this value at 1."}]}]